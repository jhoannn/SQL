# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata 
(id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL) 

# Then I inserted the Spotify Data .csv into the table.

# Finally, I performed analytics on the data using the following SQL. 

--Created a column named 'popularity score' that showed if the song was more popular, popular, or less popular depending on the song's popularity--
SELECT artist_name, track_name, popularity, 
CASE
    WHEN popularity > 90 THEN 'more popular'
    WHEN popularity > 80 < 90 THEN 'popular'
    ELSE 'less popular' 
    END AS 'popularity score'
FROM BIT_DB.Spotifydata

--Showed the top 10 longest songs in terms of duration of the song--
SELECT artist_name, track_name, duration_ms FROM BIT_DB.Spotifydata
ORDER BY duration_ms DESC
LIMIT 10

--Showed the number of times the artist Olivia Rodrigo had a song in the table--
SELECT artist_name, COUNT(artist_name) FROM BIT_DB.Spotifydata
WHERE artist_name='Olivia Rodrigo'

--Showed the songs with the most words spoken--
SELECT artist_name, track_name, speechiness FROM BIT_DB.Spotifydata
WHERE speechiness > .1
ORDER BY speechiness DESC
